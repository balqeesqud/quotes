/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class App {


    private static boolean offlineMode = false;

    public static void main(String[] args) throws IOException {
        if (!isInternetConnectionAvailable()) {
            setOfflineMode();
        }

        Quote apiQuote = getQuoteFromApi();
//
        if (apiQuote != null) {
            addQuoteToFile(apiQuote);
        } else {
            System.out.println("Failed to fetch a quote.");
        }
    }

    public static void setOfflineMode() {
        offlineMode = true;
    }

    public static boolean isInternetConnectionAvailable() {
        try {
            InetAddress.getByName("www.google.com");
            return true;
        } catch (IOException e) {
            return false;
        }
    }

        // Fetching Data From Api

        public static Quote getQuoteFromApi() {
        if (!offlineMode) {
            URL url = null;
            HttpURLConnection connection = null;
            Gson gson = new Gson();

            try {
                url = new URL("https://favqs.com/api/qotd");
                connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod("GET");

                String responseData = readResponseFromApi(connection);

                writeQuoteToFile(responseData);

                ApiResponse apiResponse = gson.fromJson(responseData, ApiResponse.class);
                return apiResponse.getQuote();

            } catch (IOException ex) {
                System.out.println("Error occurred while fetching data from the API: " + ex.getMessage());
            } finally {
                if (connection != null) {
                    connection.disconnect();
                }
            }
        } else {
            String filePath = "app/src/main/resources/quoteOfTheDay.json";
            try (FileReader reader = new FileReader(filePath)) {
                Gson gson = new Gson();
                ApiResponse quoteOfTheDayResponse = gson.fromJson(reader, ApiResponse.class);
                return quoteOfTheDayResponse.getQuote();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        return null;
    }



    // Reading Response From API
public static String readResponseFromApi(HttpURLConnection connection) throws IOException {
    String responseData = "";
    try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
        String line;
        while ((line = bufferedReader.readLine()) != null) {
            responseData += line;
        }
    }
    return responseData;
}


    // Writing Quote Data to JSON File
    public static void writeQuoteToFile(String responseData) {
        File quoteOfTheDayFile = new File("app/src/main/resources/quoteOfTheDay.json");
        try (FileWriter writer = new FileWriter(quoteOfTheDayFile)) {
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            ApiResponse quoteOfTheDayResponse = gson.fromJson(responseData, ApiResponse.class);
           gson.toJson(quoteOfTheDayResponse, writer);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void addQuoteToFile(Quote apiQuote) {
        apiQuote.setFavorites_count(0);
        String filePath = "app/src/main/resources/recentQuotes.json";
        try (FileReader reader = new FileReader(filePath)) {
            Gson gson = new GsonBuilder().setPrettyPrinting().create();

            Quote[] existingQuotes = gson.fromJson(reader, Quote[].class);
            List<Quote> updatedQuotes = new ArrayList<>(Arrays.asList(existingQuotes));
            updatedQuotes.add(apiQuote);

            try (FileWriter writer = new FileWriter(filePath)) {
                gson.toJson(updatedQuotes.toArray(new Quote[0]), writer);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        Gson gson = new Gson();
        List<Quote> quotes = new ArrayList<>();

        try {
            BufferedReader reader = new BufferedReader(new FileReader("app/src/main/resources/recentQuotes.json"));
            Quote[] quoteArray = gson.fromJson(reader, Quote[].class);

            quotes.addAll(Arrays.asList(quoteArray));
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (!quotes.isEmpty()) {
            Random random = new Random();
            int index = random.nextInt(quotes.size());



            Quote selectedQuote = quotes.get(index);

            System.out.println("Quote: " + selectedQuote.getText());
            System.out.println("Author: " + selectedQuote.getAuthor());
//            System.out.println(selectedQuote);
        } else {
            System.out.println("No quotes available.");
        }
    }
    }









